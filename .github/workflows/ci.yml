name: CI

on:
  workflow_call:

permissions:
  actions: read
  contents: read
  statuses: write

jobs:
  BuildCreaterepo:
    name: BuildCreaterepo
    runs-on: ubuntu-latest

    env:
      CR_REPO: rpm-software-management/createrepo_c
      CR_VERSION: 1.1.4

    steps:
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libcurl4-openssl-dev \
                              libbz2-dev libxml2-dev \
                              libssl-dev zlib1g-dev \
                              pkg-config \
                              libglib2.0-dev \
                              liblzma-dev \
                              libsqlite0-dev \
                              libsqlite3-dev \
                              librpm-dev \
                              libzstd-dev \
                              python3-dev \
                              cmake

      - name: Build createrepo_c binary
        run: |
          git clone --depth=1 --branch="${{env.CR_VERSION}}" \
                    "https://github.com/${{env.CR_REPO}}.git" createrepo_c

          cd createrepo_c
          mkdir build
          cd build

          cmake .. -DWITH_ZCHUNK=NO \
                   -DWITH_LIBMODULEMD=NO \
                   -DENABLE_DRPM=OFF \
                   -DBUILD_LIBCREATEREPO_C_SHARED=OFF

          make -j 1

          mkdir -p "${{github.workspace}}/.local/bin/"

          cp src/createrepo_c "${{github.workspace}}/.local/bin/"

      - name: Update PATH
        run: echo "${{github.workspace}}/.local/bin" >> $GITHUB_PATH

      - name: Print createrepo_c version info
        run: createrepo_c --version

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: createrepo_c
          path: ${{github.workspace}}/.local/bin/createrepo_c
          if-no-files-found: error
          retention-days: 1

  Go:
    name: Go
    runs-on: ubuntu-latest

    needs: BuildCreaterepo

    strategy:
      matrix:
        go: [ '1.22.x', '1.23.x' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false

      - name: Download pre-built artifacts
        uses: actions/download-artifact@v4
        with:
          name: createrepo_c
          path: ${{github.workspace}}/.local/bin

      - name: Configure environment
        run: |
          echo "${{github.workspace}}/.local/bin" >> $GITHUB_PATH
          
          chmod +x "${{github.workspace}}/.local/bin/createrepo_c"

          if ! getent group | grep -q nobody ; then
            sudo groupadd nobody
          fi

          if ! getent passwd | grep -q nobody ; then
            sudo useradd -g nobody -s /sbin/nologin nobody
          fi

      - name: Print createrepo_c version info
        run: createrepo_c --version

      - name: Download dependencies
        run: make deps

      - name: Build binary
        run: make all

      - name: Run tests
        run: make test COVERAGE_FILE=cover.out

      - name: Send coverage data to Coveralls
        uses: essentialkaos/goveralls-action@v2
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          profile: cover.out
          parallel: true
          flag-name: linux-${{ matrix.go }}

      - name: Send coverage data to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
          --force-coverage-parser go \
          -r cover.out \
          --partial

  SendCoverage:
    name: Send Coverage
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Finish parallel tests (Coveralls)
        uses: essentialkaos/goveralls-action@v2
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          parallel-finished: true

      - name: Finish parallel tests (Codacy)
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final

  Perfecto:
    name: Perfecto
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check specs with Perfecto
        uses: essentialkaos/perfecto-action@v2
        with:
          files: common/*.spec

  Shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check scripts with Shellcheck
        uses: essentialkaos/shellcheck-action@v1
        with:
          files: rep-container

  Hadolint:
    name: Hadolint
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check dockerfiles with Hadolint
        uses: essentialkaos/hadolint-action@v1
        with:
          files: .docker/*.docker

  Typos:
    name: Typos
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check spelling
        continue-on-error: true
        uses: crate-ci/typos@master
